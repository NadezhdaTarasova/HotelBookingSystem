// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Database.Migrations
{
    [DbContext(typeof(HotelContext))]
    [Migration("20210506112445_migration1")]
    partial class migration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Database.Entities.AdditionalServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdditionalServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalServiceTypeId");

                    b.ToTable("AdditionalServices");
                });

            modelBuilder.Entity("Database.Entities.AdditionalServiceTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdditionalServiceTypeEntity");
                });

            modelBuilder.Entity("Database.Entities.BookingAdditionalServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdditionalServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AdditionalServiceId");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingAdditionalServiceEntity");
                });

            modelBuilder.Entity("Database.Entities.BookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<bool>("BookingStatus")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("DepartupeTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Database.Entities.HotelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFreeRooms")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriceFrom")
                        .HasColumnType("int");

                    b.Property<int>("PriceTo")
                        .HasColumnType("int");

                    b.Property<int>("StarsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Hotels");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01f8a9f7-dfb9-4581-b13e-8d6191ea52e6"),
                            Address = "20-28 Bolsover Street, Westminster, London, W1W 5NB, United Kingdom",
                            City = "London",
                            Country = "Great Britan",
                            IsFavorite = false,
                            IsFreeRooms = true,
                            Name = "Fitzrovia Hotel",
                            PriceFrom = 99,
                            PriceTo = 192,
                            StarsCount = 4
                        },
                        new
                        {
                            Id = new Guid("30248e83-c94b-4982-a030-60f5eb640c2d"),
                            Address = "Fredrik Langesgt. 2, 9250 Tromso, Norway",
                            City = "Tromso",
                            Country = "Norway",
                            IsFavorite = false,
                            IsFreeRooms = true,
                            Name = "Scandic Ishavshotel",
                            PriceFrom = 165,
                            PriceTo = 198,
                            StarsCount = 4
                        },
                        new
                        {
                            Id = new Guid("f0812b09-6062-40a4-bca4-a0f701aa4996"),
                            Address = "34, Avenue de Wagram, 8th arrondissement: Champs - Elysees, 75008 Paris, France",
                            City = "Paris",
                            Country = "France",
                            IsFavorite = false,
                            IsFreeRooms = true,
                            Name = "Elysées Ceramic",
                            PriceFrom = 93,
                            PriceTo = 249,
                            StarsCount = 3
                        },
                        new
                        {
                            Id = new Guid("85e384f8-4ac5-43f6-9b26-39cc8f3f7b68"),
                            Address = "Alexanderplatz 7, Mitte, 10178 Berlin, Germany",
                            City = "Berlin",
                            Country = "Germany",
                            IsFavorite = false,
                            IsFreeRooms = true,
                            Name = "Park Inn by Radisson Berlin Alexanderplatz",
                            PriceFrom = 136,
                            PriceTo = 323,
                            StarsCount = 4
                        },
                        new
                        {
                            Id = new Guid("556ed795-38ea-4a0c-9d33-9e2effab8370"),
                            Address = "Avenida Aurelio Aceves Numero 225 Colonia Vallarte Poniente, 43110 Guadalajara, Mexico",
                            City = "Guadalajara",
                            Country = "Mexico",
                            IsFavorite = false,
                            IsFreeRooms = true,
                            Name = "Fiesta Americana Guadalajara",
                            PriceFrom = 42,
                            PriceTo = 233,
                            StarsCount = 4
                        });
                });

            modelBuilder.Entity("Database.Entities.HotelImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HotelImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HotelImages");
                });

            modelBuilder.Entity("Database.Entities.PaymentResultEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentSum")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("PaymentTime")
                        .HasColumnType("time");

                    b.Property<Guid>("PaymentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("PaymentTypeId");

                    b.ToTable("PaymentResultEntity");
                });

            modelBuilder.Entity("Database.Entities.PaymentTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypeEntity");
                });

            modelBuilder.Entity("Database.Entities.RoomEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Balcony")
                        .HasColumnType("bit");

                    b.Property<bool>("Bathroom")
                        .HasColumnType("bit");

                    b.Property<bool>("Conditioner")
                        .HasColumnType("bit");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<bool>("Fridge")
                        .HasColumnType("bit");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<bool>("Kitchen")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<Guid>("RoomImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("RoomsAmount")
                        .HasColumnType("tinyint");

                    b.Property<double>("SquareMeters")
                        .HasColumnType("float");

                    b.Property<bool>("Tv")
                        .HasColumnType("bit");

                    b.Property<bool>("WashingMachine")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Database.Entities.RoomImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomImages");
                });

            modelBuilder.Entity("Database.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Middlename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Database.Entities.AdditionalServiceEntity", b =>
                {
                    b.HasOne("Database.Entities.AdditionalServiceTypeEntity", "AdditionalServiceType")
                        .WithMany("AdditionalService")
                        .HasForeignKey("AdditionalServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalServiceType");
                });

            modelBuilder.Entity("Database.Entities.BookingAdditionalServiceEntity", b =>
                {
                    b.HasOne("Database.Entities.AdditionalServiceEntity", "AdditionalService")
                        .WithMany()
                        .HasForeignKey("AdditionalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.BookingEntity", "Booking")
                        .WithMany("BookingAdditionalService")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdditionalService");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Database.Entities.BookingEntity", b =>
                {
                    b.HasOne("Database.Entities.RoomEntity", "Room")
                        .WithMany("Booking")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Database.Entities.PaymentResultEntity", b =>
                {
                    b.HasOne("Database.Entities.BookingEntity", "Booking")
                        .WithMany("PaymentResult")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.PaymentTypeEntity", "PaymentType")
                        .WithMany("PaymentResult")
                        .HasForeignKey("PaymentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("PaymentType");
                });

            modelBuilder.Entity("Database.Entities.AdditionalServiceTypeEntity", b =>
                {
                    b.Navigation("AdditionalService");
                });

            modelBuilder.Entity("Database.Entities.BookingEntity", b =>
                {
                    b.Navigation("BookingAdditionalService");

                    b.Navigation("PaymentResult");
                });

            modelBuilder.Entity("Database.Entities.PaymentTypeEntity", b =>
                {
                    b.Navigation("PaymentResult");
                });

            modelBuilder.Entity("Database.Entities.RoomEntity", b =>
                {
                    b.Navigation("Booking");
                });
#pragma warning restore 612, 618
        }
    }
}
